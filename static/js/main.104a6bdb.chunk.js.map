{"version":3,"sources":["SetTime.js","TimerDisplay.js","index.js"],"names":["SetTime","props","className","id","timerType","timerTitle","timerDefault","onClick","decreaseTime","increaseTime","TimerDisplay","startTime","timeRemaining","toString","length","timerLabel","toUpperCase","slice","toggle","isTicking","reset","Pomodoro","handleIncrement","setState","prevState","handleDecrement","toggleCountdown","state","timerID","timeLeft","handleCountdown","ticking","clearInterval","setInterval","addLeadingZero","int","activeTimer","document","getElementById","play","session","timeDisplay","break","updatedTimeLeft","mins","Math","floor","secs","handleReset","audio","pause","currentTime","alertSound","process","this","src","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.104a6bdb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SetTime = (props) => {\n  return (\n    <div className=\"pomodoro__adjustment\">\n      <div id={props.timerType + \"-label\"}>{props.timerTitle}</div>\n      <div id={props.timerType + \"-length\"}>{props.timerDefault}</div>\n      <button id={props.timerType + \"-decrement\"} onClick={() => {props.decreaseTime(props.timerType)}}>-</button>\n      <button id={props.timerType + \"-increment\"} onClick={() => {props.increaseTime(props.timerType)}}>+</button>\n    </div>\n  );\n}\n\nexport default SetTime;","import React from \"react\";\n\nconst TimerDisplay = (props) => {\n  let startTime = \"mm:ss\";\n  \n  //  Handle leading zero on startTime less than 10mins\n  if (props.timeRemaining === null) {\n    startTime = props.startTime.toString().length < 2 ? \"0\" + props.startTime : props.startTime;\n  }\n\n  return (\n    <div className=\"pomodoro__timer\">\n      <div id=\"timer-label\">{props.timerLabel[0].toUpperCase() + props.timerLabel.slice(1)}</div>\n      <div id=\"time-left\">{props.timeRemaining === null ? startTime + \":00\" : props.timeRemaining}</div>\n\n      <button id=\"start_stop\" onClick={props.toggle}>{props.isTicking ? \"Stop\" : \"Start\"}</button>\n      <button id=\"reset\" onClick={props.reset}>Reset</button>\n    </div>\n  )\n}\n\nexport default TimerDisplay;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport SetTime from \"./SetTime\";\nimport TimerDisplay from \"./TimerDisplay\";\n\nimport \"./style.scss\";\n\nclass Pomodoro extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.alertSound = process.env.PUBLIC_URL + \"/assets/pomodoro-alert-JustinBW.mp3\";\n\n    this.state = {\n      break: 5,\n      session: 25,\n      activeTimer: \"session\",\n      ticking: false,\n      timeLeft: null,\n      timeDisplay: null,\n      timerID: null\n    };\n  };\n\n  handleIncrement = (timerType) => {\n    this.setState(prevState => {\n      if (prevState[timerType] < 60) {\n        return prevState[timerType] = prevState[timerType] + 1;\n      }\n    });\n  }\n\n  handleDecrement = (timerType) => {\n    this.setState(prevState => {\n      if (prevState[timerType] > 1) {\n        return prevState[timerType] = prevState[timerType] - 1;\n      }\n    });\n  }\n\n  toggleCountdown = () => {\n\n    if (!this.state.timerID && !this.state.timeLeft) {\n      this.handleCountdown();\n    }\n\n    this.setState( prevState => {\n      if (prevState.ticking) {\n        // Clear interval based on timerID\n        clearInterval(prevState.timerID);\n        return ({\n          ticking: false,\n          timerID: null\n        });\n      } else {\n        // Create timer and set the ID to the state object so we can clear it later\n        let timer = setInterval(this.handleCountdown, 1000);\n        return ({\n          ticking: true,\n          timerID: timer\n        });\n      }\n    });\n  }\n\n  addLeadingZero = (int) => {\n    // Handle leading zero if only one number\n    return int = int.toString().length < 2 ? \"0\" + int : int;\n  }\n\n  handleCountdown = () => {\n\n    // Set initial timer and begin countdown\n    if (this.state.timeLeft === null || this.state.timeLeft === 0) {\n      let activeTimer = this.state.activeTimer;\n\n      if (this.state.timerID !== null) {\n        // timerID is null on first-run or reset so skip this switch\n        activeTimer = this.state.activeTimer === \"session\" ? \"break\" : \"session\";\n\n        // Ding that digger!\n        document.getElementById(\"beep\").play();\n\n      }\n\n      if (activeTimer === \"session\") {\n        // Convert minutes to seconds\n        this.setState(prevState => ({\n          activeTimer,\n          timeLeft: prevState.session * 60,\n          timeDisplay: `${this.addLeadingZero(prevState.session)}:00`\n        }));\n      } else {\n        // let minsInSecs = (this.state.break * 60);\n        // minsInSecs =  this.addLeadingZero(minsInSecs);\n        this.setState(prevState => ({\n          activeTimer,\n          timeLeft: prevState.break * 60,\n          timeDisplay: `${this.addLeadingZero(prevState.break)}:00`\n        }));\n      }\n    } else {\n\n      this.setState(prevState => {\n        let updatedTimeLeft = prevState.timeLeft > 0 ? prevState.timeLeft - 1 : 0;\n        \n        let mins = Math.floor(updatedTimeLeft / 60);\n        let secs = updatedTimeLeft - mins * 60;\n\n        // Handle leading zero if only one number\n        mins = this.addLeadingZero(mins);\n        secs = this.addLeadingZero(secs);\n\n        if (prevState.timeDisplay === \"00:00\") {\n          return ({\n            timeLeft: null,\n            timeDisplay: `${mins}:${secs}`\n          });\n\n        } else {\n\n          return ({\n            timeLeft: updatedTimeLeft,\n            timeDisplay: `${mins}:${secs}`\n          });\n\n        }\n\n      });\n    }\n  }\n\n  handleReset = () => {\n    \n    this.setState(prevState => {\n      // Reset audio\n      let audio = document.getElementById(\"beep\");\n      audio.pause();\n      audio.currentTime = 0;\n\n      // Clear timer and reset state\n      clearInterval(prevState.timerID);\n\n      return ({\n        break: 5,\n        session: 25,\n        activeTimer: \"session\",\n        ticking: false,\n        timeLeft: null,\n        timeDisplay: null,\n        timerID: null\n      });\n    });\n  }\n\n\n  render() {\n    \n    return (\n      <div className=\"pomodoro\">\n        \n        <SetTime \n          timerTitle=\"Break Length\"\n          timerType=\"break\"\n          timerDefault={this.state.break}\n          increaseTime={this.handleIncrement}\n          decreaseTime={this.handleDecrement}\n        />\n        <SetTime \n          timerTitle=\"Session Length\"\n          timerType=\"session\"\n          timerDefault={this.state.session}\n          increaseTime={this.handleIncrement}\n          decreaseTime={this.handleDecrement}\n        />\n\n        <TimerDisplay \n          startTime={this.state.session}\n          timerLabel={this.state.activeTimer}\n          timeRemaining={this.state.timeDisplay}\n          isTicking={this.state.ticking}\n          toggle={this.toggleCountdown}\n          reset={this.handleReset}\n        />\n\n        <audio id=\"beep\" src={this.alertSound}></audio>\n      </div>\n    );\n  };\n}\n\nReactDOM.render(<Pomodoro />, document.getElementById(\"root\"));\n\n// User Story #22: When a session countdown reaches zero (NOTE: timer MUST reach 00:00), and a new countdown begins, the element with the id of timer-label should display a string indicating a break has begun.\n\n// User Story #23: When a session countdown reaches zero (NOTE: timer MUST reach 00:00), a new break countdown should begin, counting down from the value currently displayed in the id=\"break-length\" element.\n\n// User Story #24: When a break countdown reaches zero (NOTE: timer MUST reach 00:00), and a new countdown begins, the element with the id of timer-label should display a string indicating a session has begun.\n\n// User Story #25: When a break countdown reaches zero (NOTE: timer MUST reach 00:00), a new session countdown should begin, counting down from the value currently displayed in the id=\"session-length\" element.\n\n// User Story #26: When a countdown reaches zero (NOTE: timer MUST reach 00:00), a sound indicating that time is up should play. This should utilize an HTML5 audio tag and have a corresponding id=\"beep\".\n\n// User Story #27: The audio element with id=\"beep\" must be 1 second or longer.\n\n// User Story #28: The audio element with id of beep must stop playing and be rewound to the beginning when the element with the id of reset is clicked."],"sourceRoot":""}